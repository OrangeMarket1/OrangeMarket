<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="orange.service.impl.ProductMapper">
	
	<!-- insert -->
	
	<!-- 제품 등록 -->
	<insert id="insertProduct" parameterType="productVO">
	
		INSERT INTO product
			(pro_code,
			seller,
			pro_category_code,
			title,
			keyword,
			addr,
			refund,
			nego,
			price,
			content,
			rdate,
			udate,
			imgs)
		
     VALUES (PRODUCT_SEQ.NEXTVAL,
			#{seller},
			#{proCategoryCode},
			#{title},
			#{keyword},
			#{addr},
			#{refund},
			#{nego},
			#{price},
			#{content},
			sysdate,
			sysdate,
			#{imgs})
	
	</insert>
	
	<insert id="insertLikeProduct" parameterType="productVO">
		INSERT INTO like_product (
				unq,
				liker,
				pro_code,
				seller,
				pro_category_code,
				rdate)
		
		VALUES (LIKE_PRODUCT_SEQ.NEXTVAL,
				${userId},
				${proCode},
				${seller},
				${proCategoryCode},
				sysdate)
	</insert>
	
	<insert id="insertReviewGood" parameterType="productVO">
		INSERT INTO review(
				unq,
				pro_code,
				buyer,
				pro_category_code,
				seller,
				good)
					
		VALUES (review_seq.nextval,
				${proCode},
				${buyer},
				${proCategoryCode},
				${seller},
				'1')
		
	</insert>
	
	<insert id="insertReviewBad" parameterType="productVO">
		INSERT INTO review(
				unq,
				pro_code,
				buyer,
				pro_category_code,
				seller,
				bad)
					
		VALUES (review_seq.nextval,
				${proCode},
				${buyer},
				${proCategoryCode},
				${seller},
				'1')
		
	</insert>
	
	<!-- select -->
	
	<!-- 검색 기능 및 연관 상품 기능 -->
	<select id="selectKeywordList" resultType="productVO">
		SELECT
			pro_code,
			decode(status,1,'판매중',2,'예약중', 0, '거래완료') status,
			title,
			price,
			addr,
            keyword,
			imgs,
			(select 
                CASE WHEN USER_LEVEL >= 70 THEN '신뢰회원' 
                WHEN USER_LEVEL >= 40 THEN '일반회원' 
                ELSE '주의회원' END
             FROM
                member
            WHERE
                user_id = p.seller) as user_level
		FROM 
			product p, mem_status m
			
		WHERE
				m.user_id = p.seller
            AND
          		m.mem_state_code = '1'
            AND
           		p.addr like '${addr}%'
           	AND
            	p.status != '0'
			AND
                p.keyword = '${keyword}'
		ORDER BY
			rdate DESC
	</select>

	<!-- 동네 인증 여부 가져오기 -->
	<select id="selectAddrPass" parameterType="productVO" resultType="memberVO">
		SELECT
			addr_pass
		FROM
			member
		WHERE
			user_id = ${userId}
	</select>
	
	<!-- 멤버 주소 가져오기 (앞부분) -->
	<select id="selectMemberAddr" resultType="String">
		SELECT 
			DECODE(SUBSTR(addr, INSTR(addr,substr(addr, -1), 8), INSTR(addr,substr(addr, -1), 8)), '리',
                   SUBSTR(addr, 1, INSTR(SUBSTR(addr, 1, INSTR(addr,substr(addr, -1), 8)), ' ', 9) ),
                   SUBSTR(addr, 1, INSTR(addr,substr(addr, -1), 8)) )
		FROM 
			member
		WHERE
			user_id = ${userId}
	</select>

	<!-- 지정한 키워드 물품 목록 리스트 (나의 관심 목록) -->	
	<select id="selectMyKeywordList" resultType="productVO">
		SELECT 
			p.pro_code, 
			p.imgs, 
			p.title, 
			p.price, 
			p.keyword,
			(select 
                CASE WHEN USER_LEVEL >= 70 THEN '신뢰회원' 
                WHEN USER_LEVEL >= 40 THEN '일반회원' 
                ELSE '주의회원' END
             FROM
                member
            WHERE
                user_id = p.seller) as user_level
			
		FROM
		    product p, mykeyword mk, mem_status ms
		WHERE
				p.seller = ms.user_id
            AND
          		ms.mem_state_code = '1'
            AND
           		p.addr like '${addr}%'
           	AND
            	p.status != '0'
            AND
                p.keyword = mk.mykeyword
		    AND
		    	mk.user_id = ${userId}
		    AND
                p.seller != ${userId}
		    	
		    ORDER BY p.rdate DESC
	</select>
	
	<!-- 전체 제품 판매 리스트 -->
	<select id="selectProductList" resultType="egovMap">
		SELECT
			pro_code,
			decode(status,1,'판매중',2,'예약중', 0, '거래완료') status,
			title,
			price,
			addr,
			imgs,
			(select 
                CASE WHEN USER_LEVEL >= 70 THEN '신뢰회원' 
                WHEN USER_LEVEL >= 40 THEN '일반회원' 
                ELSE '주의회원' END
             FROM
                member
            WHERE
                user_id = p.seller) as user_level
		FROM 
			product p, mem_status m
			
		WHERE
				m.user_id = p.seller
            AND
          		m.mem_state_code = '1'
            AND
           		p.addr like '${addr}%'
           	AND
            	p.status != '0'
			
		ORDER BY
			rdate DESC
			
	</select>
	
	<!-- 동네별 관심순 리스트 -->
	<select id="selectLikeProductList" resultType="productVO">
		SELECT
   			pro_code, 
   			title, 
   			price, 
   			imgs,
   			(select count(*) from like_product where pro_code = p.pro_code) like_cnt,
   			(select 
                CASE WHEN USER_LEVEL >= 70 THEN '신뢰회원' 
                WHEN USER_LEVEL >= 40 THEN '일반회원' 
                ELSE '주의회원' END
             FROM
                member m
            WHERE
                m.user_id = p.seller) as user_level
		FROM
		    product p, mem_status m
			
		WHERE
				m.user_id = p.seller
            AND
          		m.mem_state_code = '1'
            AND
           		p.addr like '${addr}%'
           	AND
            	p.status != '0'
			
		
		ORDER BY like_cnt DESC
	</select>
	
	<!-- 카테고리별 제품 리스트 표시 -->
	<select id="selectProductCategoryList" resultType="egovMap">
		SELECT
			pro_code,
			decode(status,1,'판매중',2,'예약중', 0, '거래완료') status,
			title,
			price,
			addr,
			imgs,
			(select 
                CASE WHEN USER_LEVEL >= 70 THEN '신뢰회원' 
                WHEN USER_LEVEL >= 40 THEN '일반회원' 
                ELSE '주의회원' END
             FROM
                member
            WHERE
                user_id = p.seller) as user_level
		FROM 
			product p, mem_status m
			
		WHERE
				m.user_id = p.seller
            AND
          		m.mem_state_code = '1'
            AND
           		p.addr like '${addr}%'
           	AND
            	p.status != '0'
			AND
				pro_category_code = ${proCategoryCode}
			
		ORDER BY
			rdate DESC
			
	</select>
	
	<!-- 카테고리명 리스트 출력 -->
	<select id="selectCategoryList" resultType="egovMap">
		SELECT 
			pro_category_code, 
			category, 
			cate_status
		FROM 
			pro_category
	</select>
	
	<!-- 카테고리명 표시 -->
	<select id="selectProCategory" resultType="string">
		SELECT
		    category
		FROM
		    pro_category
		WHERE
		    pro_category_code = ${proCategoryCode}
			
	</select>
	
	<!-- 채팅방 개수 세기 -->
	<select id="selectChatCount" resultType="int">
		SELECT 
			count(*) as chat_cnt
		FROM 
			chat 
		WHERE 
			pro_code = ${proCode}
	</select>	
	
	<!-- 제품 상세보기 -->
	<select id="selectProductDetail" resultType="productVO">
		SELECT
			pro_code,
			decode(status,1,'판매중',2,'예약중', 0,'거래완료') status,
			seller,
			pro_category_code,
			title,
			keyword,
			addr,
			price,
			content,
			rdate,
			udate,
			status,
			hits,
			nvl(buyer, '0') as buyer,
			refund,
			nego,
			( select nik_name from member where user_id = p.seller) seller_nik,
			nvl(buyer_nik, '없음') as buyer_nik,
			imgs,
			(select 
                CASE WHEN USER_LEVEL >= 70 THEN '신뢰회원' 
                WHEN USER_LEVEL >= 40 THEN '일반회원' 
                ELSE '주의회원' END
             FROM
                member
            WHERE
                user_id = p.seller) as user_level
			
		FROM 
			product p
			
		WHERE
			pro_code = ${proCode}

	</select>
	
	<!-- 사용자의 판매 제품 리스트  -->
	<select id="selectSellProductList" parameterType="pagingVO" resultType="egovMap">
		SELECT b.* FROM	
			(SELECT ROWNUM rn, a.* FROM
				(SELECT
					pro_code,
					seller,
					buyer,
					pro_category_code,
					title,
					price,
					status,
					( select nik_name from member where user_id = p.seller) seller_nik,
					nvl(buyer_nik, '없음') as buyer_nik,
					imgs
					
				FROM
					product p
					
				WHERE
					seller = ${writer}
				
				ORDER BY
					status DESC, rdate DESC  ) a ) b
		WHERE rn BETWEEN #{startIndex} AND #{endIndex}	
		
	</select>
	
	<!-- 판매 내역 토탈 갯수 -->
	<select id="selectSellHistoryTotal" resultType="int">
		SELECT
			count(*)			
		FROM
			product p
			
		WHERE
			seller = ${writer}
	</select>
	
		<!-- 사용자의 구매 제품 리스트  -->
	<select id="selectBuyProductList" parameterType="pagingVO" resultType="egovMap">
		
		SELECT b.* FROM	
			(SELECT ROWNUM rn, a.* FROM
				(SELECT
					pro_code,
					seller,
					buyer,
					pro_category_code,
					title,
					price,
					status,
					( select nik_name from member where user_id = p.seller) as seller_nik,
					nvl(( select nik_name from member where user_id = ${writer}), '없음') as buyer_nik,
					imgs,
					(SELECT count(*) FROM review WHERE pro_code = p.pro_code ) as review_cnt
					
				FROM
					product p
					
				WHERE
					buyer = ${writer}
				AND
					status = 0
				
				ORDER BY
					status DESC, rdate DESC  ) a ) b
		WHERE rn BETWEEN #{startIndex} AND #{endIndex}
	</select>
	
	<!-- 구매 갯수 카운트 -->
	<select id="selectBuyHistoryTotal" resultType="int">
		SELECT
			count(*)			
		FROM
			product p
			
		WHERE
			buyer = ${writer}
	</select>
	
	<!-- 수정 위한 제품 데이터 보기 -->
	<select id="selectProductModify" resultType="productVO">
		SELECT
			pro_code,
			decode(status,1,'판매중',2,'예약중', 0, '거래완료') status,
			seller,
			pro_category_code,
			title,
			keyword,
			addr,
			price,
			content,
			rdate,
			udate,
			status,
			hits,
			nvl(buyer, '0') as buyer,
			refund,
			nego,
			( select nik_name from member where user_id = p.seller) seller_nik,
			nvl(buyer_nik, '0') as buyer_nik,
			imgs,
			(select 
                CASE WHEN USER_LEVEL >= 70 THEN '신뢰회원' 
                WHEN USER_LEVEL >= 40 THEN '일반회원' 
                ELSE '주의회원' END
             FROM
                member
            WHERE
                user_id = p.seller) as user_level
			
		FROM 
			product p
			
		WHERE
			pro_code = ${proCode}
	</select>
	
	<!-- 시세조회 -->
	<select id="selectProductPriceAvg" resultType="productVO">
		SELECT
			pro_code,
            p.pro_category_code,
			decode(status,1,'판매중',2,'예약중', 0, '거래완료') status,
			title,
			price,
			addr,
            keyword,
            ( select nik_name from member where user_id = p.seller) seller_nik,
            (SELECT count(*) FROM product p, mem_status m
			WHERE
				m.user_id = p.seller
            AND
          		m.mem_state_code = '1'
			AND
                p.keyword = '${keyword}') like_cnt
			
		FROM 
			product p, mem_status m
			
		WHERE
				m.user_id = p.seller
            AND
          		m.mem_state_code = '1'
			AND
                p.keyword = '${keyword}'
                
		ORDER BY
			rdate DESC
	</select>
	
	<!-- 글 작성 시 이미지 파일명에 적용할 숫자. 판매자가 등록한 게시글 카운트 후 증가하여 이미지 뒤에 붙이기 -->
	<select id="selectSellerCount" resultType="int">
		SELECT 
			count(*)
		FROM
			product
		WHERE
			seller = ${seller}
	</select>
	
	<!-- 글 작서 시 자동완성 될 주소 받아오기 -->
	<select id="selectProductAddr" resultType="productVO">
		SELECT
			user_id,
			addr
			
		FROM
			member
		
		WHERE
			user_id = ${seller}
	</select>
	
	<!-- 해당 판매 제품 중복 방지 체크용 좋아요 갯수 -->
	<select id="selectLikeCount" resultType="int">
		SELECT 
		    count(*)
		FROM 
		    like_product
		WHERE
		    liker = ${userId}
		    AND
		    pro_code = ${proCode}
	</select>
	
	<!-- 해당 제품의 전체 좋아요 갯수 -->
	<select id="selectLikeAllCount" resultType="int">
		SELECT 
		    count(*)
		FROM 
		    like_product
		WHERE
		    pro_code = ${proCode}
	</select>
	
	<!-- 거래 완료 후 리뷰 중복 방지용 갯수 -->
	<select id="selectReviewCount" resultType="int">
		SELECT
			count(*)
		FROM
			review
		WHERE
			pro_code = ${proCode}
	</select>
	
	<!-- 마이키워드 유무 체크용 갯수 -->
	<select id="selectMykeywrodCount" resultType="int">
		SELECT
			count(*)
		FROM
		    mykeyword
		WHERE
		    user_id = ${userId}
	</select>
	
	<!-- select end -->
	
	<!-- update start -->
		
	<update id="updateProductHits">
		UPDATE product
			SET hits = hits + 1
		WHERE pro_code = ${proCode}
	</update>
		
	<!-- 제품 정보 수정 저장 -->
	<update id="updateProduct">
		UPDATE product
			SET
				pro_category_code = '${proCategoryCode}',
				title = '${title}',
				keyword = '${keyword}',
				addr = '${addr}',
				refund = '${refund}',
				nego = '${nego}',
				price = '${price}',
				content = '${content}',
				udate = sysdate,
				imgs = '${imgs}'
		WHERE pro_code = ${proCode}
	</update>
	
	<!-- 거래 목록에서 제품 상태 변경 기능 -->
	<update id="updateProductStatus">
		UPDATE product
			SET
				status = ${status}
		WHERE pro_code = ${proCode}
	</update>
	
	<!-- 제품 상태 '판매중'으로 변경 시 구매자 정보 삭제 -->
	<update id="updateProductStatAndBuyer">
		UPDATE product
			SET
				buyer = null,
				buyer_nik = null
		WHERE pro_code = ${proCode}
	</update>
	
	<!-- 거래 후 판매자 평가 좋아요 -->
	<update id="updateUserLevelGood">
		UPDATE member
			SET user_level = user_level + 1
		WHERE user_id = ${seller}
	</update>
	
	<!-- 거래 후 판매자 평가 싫어요 -->
	<update id="updateUserLevelBad">
		UPDATE member
			SET user_level = user_level - 1
		WHERE user_id = ${seller}
	</update>
	
	<!-- update end -->
	
	<!-- delete start -->
	
	<!-- 제품 삭제 -->
	<delete id="deleteProduct" parameterType="productVO">
		DELETE FROM product
		WHERE
			pro_code = ${proCode}
	</delete>
	
	<!-- 제품 삭제 시 좋아요 테이블 데이터 삭제 -->
	<delete id="deleteLikeProduct" parameterType="productVO">
		DELETE FROM like_product
		WHERE
			pro_code = ${proCode}
	</delete>
	
	
	<!-- delete end -->


</mapper>